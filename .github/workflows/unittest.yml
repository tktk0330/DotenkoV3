name: Unit Tests

# トリガー条件
on:
  pull_request:
    branches: [ main, develop ]

# 並列実行の制限
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Unit Tests
    runs-on: macos-15  # Xcode 16をサポートするためmacos-15に変更
    
    strategy:
      matrix:
        # 利用可能なシミュレーターでテスト実行（iOS 18.2でテストターゲットと一致）
        destination: [
          'platform=iOS Simulator,name=iPhone 16,OS=18.2'
        ]
    
    steps:
    # リポジトリのチェックアウト
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得（必要に応じて）
    
    # 機密ファイルの復元
    - name: Restore Secret Files
      env:
        CONFIG_BASE64: ${{ secrets.CONFIG_BASE64 }}
        GOOGLE_SERVICE_INFO_PLIST_BASE64: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST_BASE64 }}
        INFO_PLIST_BASE64: ${{ secrets.INFO_PLIST_BASE64 }}
      run: |
        # Config.swiftの復元
        # Config.swiftの復元
        if [ -n "$CONFIG_BASE64" ]; then
          if echo "$CONFIG_BASE64" | base64 --decode > DotenkoV3/Config/Config.swift; then
            echo "✅ Config.swift restored from secrets"
          else
            echo "❌ Failed to decode CONFIG_BASE64 secret"
            exit 1
          fi
        else
          echo "⚠️ CONFIG_BASE64 secret not found"
        fi
        
        # Info.plistの復元
        if [ -n "$INFO_PLIST_BASE64" ]; then
          echo "$INFO_PLIST_BASE64" | base64 --decode > DotenkoV3/Info.plist
          echo "✅ Info.plist restored from secrets"
        else
          echo "⚠️ INFO_PLIST_BASE64 secret not found, using existing file"
        fi
        
        # GoogleService-Info.plistの復元
        if [ -n "$GOOGLE_SERVICE_INFO_PLIST_BASE64" ]; then
          echo "$GOOGLE_SERVICE_INFO_PLIST_BASE64" | base64 --decode > DotenkoV3/GoogleService-Info.plist
          echo "✅ GoogleService-Info.plist restored from secrets"
        else
          echo "⚠️ GOOGLE_SERVICE_INFO_PLIST_BASE64 secret not found"
          echo "ℹ️ Firebase設定が必要な場合はSecretsに設定してください"
        fi
        
        # ファイルの存在確認
        echo "📁 Secret files status:"
        ls -la DotenkoV3/Config/Config.swift DotenkoV3/Info.plist DotenkoV3/GoogleService-Info.plist 2>/dev/null || echo "Some files missing"
        
        # ファイル内容の簡易検証
        echo ""
        echo "🔍 File content validation:"
        if [ -f "DotenkoV3/Config/Config.swift" ]; then
          echo "✅ Config.swift: $(wc -l < DotenkoV3/Config/Config.swift) lines, $(wc -c < DotenkoV3/Config/Config.swift) bytes"
          echo "   First line: $(head -1 DotenkoV3/Config/Config.swift)"
        fi
        
        if [ -f "DotenkoV3/Info.plist" ]; then
          echo "✅ Info.plist: $(wc -c < DotenkoV3/Info.plist) bytes"
          echo "   Contains <?xml: $(grep -c '<?xml' DotenkoV3/Info.plist || echo 0)"
        fi
        
        if [ -f "DotenkoV3/GoogleService-Info.plist" ]; then
          echo "✅ GoogleService-Info.plist: $(wc -c < DotenkoV3/GoogleService-Info.plist) bytes"
          echo "   Contains <?xml: $(grep -c '<?xml' DotenkoV3/GoogleService-Info.plist || echo 0)"
        fi
        
        echo "ℹ️ AdMob設定はConfig.swiftで管理されています"
    
    # Xcodeバージョンの設定
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'  # プロジェクトファイル形式77をサポートするバージョンに変更
    
    # CocoaPodsのキャッシュ設定
    - name: Cache CocoaPods
      uses: actions/cache@v4
      with:
        path: Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
    
    # CocoaPodsの依存関係インストール
    - name: Install CocoaPods dependencies
      run: |
        gem install cocoapods
        pod install --repo-update
    
    # Xcodeプロジェクトのビルド設定確認
    - name: Show Xcode version and available simulators
      run: |
        xcodebuild -version
        xcrun simctl list devicetypes
        xcrun simctl list runtimes
    
    # プロジェクト情報の確認
    - name: Verify Project Configuration
      run: |
        echo "📋 Checking project configuration..."
        xcodebuild -list -workspace DotenkoV3.xcworkspace
        echo ""
        echo "📁 Checking secret files..."
        ls -la DotenkoV3/Config/
        echo ""
        echo "🔍 Checking Config.swift content (first 10 lines)..."
        head -10 DotenkoV3/Config/Config.swift || echo "Config.swift not found or empty"
    
    # テストの実行
    - name: Run Unit Tests
      run: |
        echo "🚀 Starting Unit Tests..."
        echo "📱 Testing on: ${{ matrix.destination }}"
        
        # テスト実行
        if xcodebuild test \
          -workspace DotenkoV3.xcworkspace \
          -scheme DotenkoV3 \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          -enableCodeCoverage YES \
          -derivedDataPath DerivedData \
          -resultBundlePath TestResults.xcresult \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO; then
          echo "✅ Unit tests completed successfully"
        else
          echo "❌ Unit tests failed"
          # テスト結果が生成されているか確認
          if [ -d "TestResults.xcresult" ]; then
            echo "📊 Test results bundle was created despite failures"
          else
            echo "⚠️ No test results bundle found"
          fi
          exit 1
        fi
    
    # テスト結果の解析とレポート生成
    - name: Generate Test Report
      if: always()  # テストが失敗してもレポートを生成
      run: |
        if [ -d "TestResults.xcresult" ]; then
          echo "🔍 Generating test report..."
          # 新しい推奨方法でテスト結果を取得
          if xcrun xcresulttool get test-results summary --path TestResults.xcresult --format json > test_results.json 2>/dev/null; then
            echo "✅ Test results generated using new format"
          else
            echo "⚠️ New format failed, trying legacy format..."
            # フォールバック: レガシー形式で取得
            if xcrun xcresulttool get --legacy --format json --path TestResults.xcresult > test_results.json 2>/dev/null; then
              echo "✅ Test results generated using legacy format"
            else
              echo "❌ Failed to generate test results"
              # 最低限のレポートファイルを作成
              echo '{"status": "error", "message": "Failed to parse test results"}' > test_results.json
            fi
          fi
        else
          echo "❌ No test results found"
          echo '{"status": "error", "message": "No test results found"}' > test_results.json
        fi
    
    # コードカバレッジの生成
    - name: Generate Code Coverage
      if: always()
      run: |
        if [ -d "DerivedData" ]; then
          xcrun xccov view --report --json DerivedData/Logs/Test/*.xcresult > coverage.json || true
          echo "Code coverage generated"
        else
          echo "No coverage data found"
        fi
    
    # 機密ファイルのクリーンアップ
    - name: Cleanup Secret Files
      if: always()
      run: |
        rm -f DotenkoV3/Config/Config.swift DotenkoV3/Info.plist DotenkoV3/GoogleService-Info.plist
        echo "🧹 Secret files cleaned up"
    
    # テスト結果のアーティファクト保存
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ strategy.job-index }}
        path: |
          TestResults.xcresult
          test_results.json
          coverage.json
        retention-days: 30
    
    # テスト失敗時の詳細ログ出力
    - name: Show Test Failures
      if: failure()
      run: |
        if [ -d "TestResults.xcresult" ]; then
          echo "🔍 Analyzing test failures..."
          # 新しい推奨方法でテスト失敗情報を取得
          if xcrun xcresulttool get test-results tests --path TestResults.xcresult --format json > test_failures.json 2>/dev/null; then
            echo "✅ Test failure analysis using new format"
            # テスト失敗の詳細を表示
            if command -v jq >/dev/null 2>&1; then
              echo "📊 Test failure summary:"
              jq '.tests[] | select(.status == "failed") | {name: .name, status: .status}' test_failures.json || echo "No specific failures found"
            else
              echo "📄 Raw test failure data:"
              head -20 test_failures.json
            fi
          else
            echo "⚠️ New format failed, trying legacy format..."
            # フォールバック: レガシー形式で取得
            if xcrun xcresulttool get --legacy --format json --path TestResults.xcresult > legacy_results.json 2>/dev/null; then
              echo "✅ Test failure analysis using legacy format"
              if command -v jq >/dev/null 2>&1; then
                echo "📊 Legacy format failure summary:"
                jq '.issues.testFailureSummaries' legacy_results.json 2>/dev/null || echo "No failure summaries found"
              else
                echo "📄 Raw legacy failure data:"
                head -20 legacy_results.json
              fi
            else
              echo "❌ Failed to analyze test failures"
            fi
          fi
        else
          echo "❌ No test results found for failure analysis"
        fi

  # テスト結果のサマリー作成
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        {
          echo "## Test Results Summary"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Test Status: ${{ needs.test.result }}"
          echo ""
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "✅ All tests passed successfully!"
          else
            echo "❌ Some tests failed. Check the test job for details."
          fi
        } >> "$GITHUB_STEP_SUMMARY"
